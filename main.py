import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from dotenv import load_dotenv
import asyncio
import logging

from agents.agent_graph import process_news_channels
from utils.helpers import (
    format_report_for_telegram
)
from config.settings import TELEGRAM

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM['BOT_TOKEN'])
dp = Dispatcher()

user_channels = dict()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∞ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")],
    ],
    resize_keyboard=True
)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏—Ö –≤ helpers –∏ —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
def save_user_channels():
    try:
        os.makedirs("data", exist_ok=True)
        with open("data/user_channels.json", "w", encoding="utf-8") as f:
            json.dump(user_channels, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")

def load_user_channels():
    global user_channels
    try:
        if os.path.exists("data/user_channels.json"):
            with open("data/user_channels.json", "r", encoding="utf-8") as f:
                user_channels = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    load_user_channels()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤.\n"
        "–ü–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=main_kb
    )

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    await message.answer(
        "ü§ñ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n\n"
        "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "üì∞ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - —Å–æ–±—Ä–∞—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode="Markdown"
    )

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel_prompt(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel –∏–ª–∏ https://t.me/channel):",
        reply_markup=types.ForceReply()
    )

@dp.message(lambda m: m.reply_to_message and "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É" in m.reply_to_message.text)
async def add_channel_handler(message: Message):
    channel = message.text.strip()
    if channel.startswith("https://t.me/"):
        channel = "@" + channel.split("/")[-1]
    elif not channel.startswith("@"):
        channel = "@" + channel

    user_id = str(message.from_user.id)
    if user_id not in user_channels:
        user_channels[user_id] = []
    if channel in user_channels[user_id]:
        await message.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_kb)
        return

    user_channels[user_id].append(channel)
    save_user_channels()
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.", reply_markup=main_kb)

@dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def list_channels(message: Message):
    user_id = str(message.from_user.id)
    channels = user_channels.get(user_id, [])
    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=main_kb)
        return
    txt = "\n".join([f"{i+1}. {c}" for i, c in enumerate(channels)])
    await message.answer(f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{txt}", reply_markup=main_kb)

@dp.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def remove_channel_prompt(message: Message):
    user_id = str(message.from_user.id)
    channels = user_channels.get(user_id, [])
    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=main_kb)
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {c}", callback_data=f"remove_{i}")]
            for i, c in enumerate(channels)
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_channel_handler(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    index = int(callback.data.split("_")[1])
    channels = user_channels.get(user_id, [])
    if 0 <= index < len(channels):
        removed = channels.pop(index)
        user_channels[user_id] = channels
        save_user_channels()
        await callback.message.edit_text(f"–ö–∞–Ω–∞–ª {removed} —É–¥–∞–ª—ë–Ω.")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    else:
        await callback.answer("–û—à–∏–±–∫–∞!", show_alert=True)

@dp.message(lambda m: m.text == "üì∞ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
async def get_news(message: Message):
    user_id = str(message.from_user.id)
    channels = user_channels.get(user_id, [])
    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=main_kb)
        return

    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        report = await process_news_channels(channels)
        formatted = format_report_for_telegram(report)
        await bot.send_message(message.chat.id, formatted, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=main_kb)
    finally:
        await processing_msg.delete()

async def main():
    load_user_channels()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
